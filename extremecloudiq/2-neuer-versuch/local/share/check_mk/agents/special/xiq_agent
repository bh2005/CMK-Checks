#!/usr/bin/env python3

import requests
import json
import time
import logging
import argparse
import os
from logging.handlers import RotatingFileHandler
import sys
import keyring  # Für die sichere Speicherung des Tokens

# Konfiguration
XIQ_BASE_URL = "https://api.extremecloudiq.com"
LOG_FILE = "/var/log/check_mk/xiq_agent.log"
MAX_LOG_SIZE = 10 * 1024 * 1024  # 10 MB
LOG_BACKUP_COUNT = 5

# Logging Konfiguration
logging.basicConfig(
    handlers=[
        RotatingFileHandler(LOG_FILE, maxBytes=MAX_LOG_SIZE, backupCount=LOG_BACKUP_COUNT)
    ],
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s",
)
log = logging.getLogger(__name__)

def generate_xiq_api_key(username, password):
    #"""Generates a new XIQ API key."""
    url = f"{XIQ_BASE_URL}/login"
    headers = {"Content-Type": "application/json"}
    data = {"username": username, "password": password}

    try:
        response = requests.post(url, headers=headers, json=data)
        response.raise_for_status()
        json_response = response.json()
        api_key = json_response.get("access_token")

        if not api_key:
            log.error("Error: Could not extract API key from the response")
            return None
        return api_key

    except requests.exceptions.RequestException as e:
        log.error(f"Error during API request: {str(e)}")
        return None
    except json.JSONDecodeError as e:
        log.error(f"Error decoding JSON response: {str(e)}")
        return None


    #"""Renews the API token using stored credentials."""
    username = os.getenv("ADMIN_MAIL")
    password = os.getenv("XIQ_PASS")

    if not username or not password:
        log.error("Environment variables ADMIN_MAIL or XIQ_PASS are not set")
        return None

    new_api_key = generate_xiq_api_key(username, password)
    if new_api_key:
        os.environ["XIQ_API_SECRET"] = new_api_key
        log.info("API key successfully renewed")
        return new_api_key
    else:
        log.error("Error renewing API key")
        return None

def get_xiq_data(endpoint, api_key, params=None):
    #"""Queries the XIQ API with improved error handling."""
    url = f"{XIQ_BASE_URL}{endpoint}"
    api_key = get_api_key()
    headers = {"Authorization": f"Bearer {api_key}", "Accept": "application/json"}

    try:
        response = requests.get(url, headers=headers, params=params, timeout=10) # Added timeout
        response.raise_for_status() # Raises an exception for 4xx and 5xx errors
        return response.json()

    except requests.exceptions.Timeout:
        log.error(f"Timeout while fetching {url}")
        return None
    except requests.exceptions.ConnectionError as e:
        log.error(f"Connection error while fetching {url}: {e}")
        return None
    except requests.exceptions.HTTPError as e:
        log.error(f"HTTP error while fetching {url}: {e}")
        if e.response is not None:
            log.error(f"Response text from server: {e.response.text}") # Output response text
        return None
    except requests.exceptions.RequestException as e:
        log.error(f"General error while fetching {url}: {e}")
        return None
    except json.JSONDecodeError as e:
        log.error(f"Error decoding JSON response from {url}: {e}")
        if response is not None:
            log.error(f"Faulty response: {response.text}") # Output response text
        return None
    except Exception as e: # Catches all other exceptions
        log.error(f"Unexpected error while fetching {url}: {e}")
        return None

def format_uptime(uptime_unix):
    #"""Formats the uptime based on the UNIX timestamp."""
    if not isinstance(uptime_unix, (int, float)):
        return None

    try:
        current_time = int(time.time())
        uptime_s = current_time - int(uptime_unix)

        if uptime_s < 0:
            return "Timestamp is in the future"

        uptime_m = uptime_s // 60
        uptime_h = uptime_m // 60
        uptime_d = uptime_h // 24

        if uptime_d > 2000:
            return "Offline"

        s = uptime_s % 60
        m = uptime_m % 60
        h = uptime_h % 24

        return f"{uptime_d} days, {h:02} hours, {m:02} minutes, {s:02} seconds"
    except TypeError:
        return None

def get_xiq_api_key(username, password):
    # Versuche, den Token aus dem Keyring zu laden
    api_key = keyring.get_password("extremecloudiq", username)

    if api_key:
        # Überprüfe, ob der Token noch gültig ist (optional)
        # Hier kannst du eine Anfrage an die API senden, um die Gültigkeit zu prüfen.
        # Wenn die Anfrage fehlschlägt, ist der Token ungültig.
        try:
            response = requests.get(f"{XIQ_BASE_URL}/account", headers={"Authorization": f"Bearer {api_key}"}, timeout=5)  # Beispiel-Endpunkt
            response.raise_for_status()  # Gültiger Token
            return api_key
        except requests.exceptions.RequestException as e:
            log.warning(f"Token ist möglicherweise abgelaufen oder ungültig: {e}")
            # Token ist ungültig, also löschen und neu abrufen
            keyring.delete_password("extremecloudiq", username)
            api_key = None  # Setze api_key auf None, um den Token neu abzurufen
    else:
        # Fordere den Benutzer auf, Benutzername und Passwort einzugeben (nur beim ersten Mal)
        if not username or not password:
            print("<<<xiq_error>>>")
            print("Benutzername und Passwort müssen in WATO konfiguriert werden.")
            sys.exit(1)

        api_key = generate_xiq_api_key(username, password)

        if api_key:
            # Speichere den Token im Keyring
            keyring.set_password("extremecloudiq", username, api_key)
            return api_key
        else:
            print("<<<xiq_error>>>")
            print("Fehler beim Abrufen des API-Schlüssels.")
            sys.exit(1)

def main():
    parser = argparse.ArgumentParser(description="Checkmk special agent for ExtremeCloud IQ devices.")
    parser.add_argument("hostname", help="Hostname for Checkmk")
    parser.add_argument("username", nargs="?", help="ExtremeCloud IQ username (optional, for initial setup)")
    parser.add_argument("password", nargs="?", help="ExtremeCloud IQ password (optional, for initial setup)")
    args = parser.parse_args()

    api_key = get_xiq_api_key(args.username, args.password)

    devices = get_xiq_data("/devices", api_key)
    if not devices or "data" not in devices:
        print("<<<xiq_error>>>")
        print("Keine Geräte gefunden oder Fehler beim Abrufen der Geräte.")
        sys.exit(1)

    print("<<<xiq_devices>>>")
    for device in devices["data"]:
        uptime = format_uptime(device.get("system_up_time"))
        print(f"{device.get('name', 'N/A')} {uptime}")

if __name__ == "__main__":
    main()