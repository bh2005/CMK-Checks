#!/usr/bin/env python3

import requests
import json
import time
import logging
import argparse
from logging.handlers import RotatingFileHandler

# Configuration
XIQ_BASE_URL = "https://api.extremecloudiq.com"
LOG_FILE = "/var/log/check_mk/xiq_ap_check.log"
MAX_LOG_SIZE = 10 * 1024 * 1024  # 10 MB
LOG_BACKUP_COUNT = 5

# Configure logging with rotation
logging.basicConfig(
    handlers=[
        RotatingFileHandler(LOG_FILE, maxBytes=MAX_LOG_SIZE, backupCount=LOG_BACKUP_COUNT)
    ],
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s",
)
log = logging.getLogger(__name__)

def generate_xiq_api_key(username, password):
    """Generates a new XIQ API key."""
    url = f"{XIQ_BASE_URL}/login"
    headers = {"Content-Type": "application/json"}
    data = {"username": username, "password": password}

    try:
        response = requests.post(url, headers=headers, json=data)
        response.raise_for_status()
        json_response = response.json()
        api_key = json_response.get("access_token")

        if not api_key:
            log.error("Error: Could not extract API key from the response")
            return None
        return api_key

    except requests.exceptions.RequestException as e:
        log.error(f"Error during API request: {str(e)}")
        return None
    except json.JSONDecodeError as e:
        log.error(f"Error decoding JSON response: {str(e)}")
        return None

def get_xiq_data(endpoint, api_key, params=None):
    """Queries the XIQ API with improved error handling."""
    url = f"{XIQ_BASE_URL}{endpoint}"
    headers = {"Authorization": f"Bearer {api_key}", "Accept": "application/json"}

    try:
        response = requests.get(url, headers=headers, params=params, timeout=10)
        response.raise_for_status()
        return response.json()

    except requests.exceptions.Timeout:
        log.error(f"Timeout while fetching {url}")
        return None
    except requests.exceptions.ConnectionError as e:
        log.error(f"Connection error while fetching {url}: {e}")
        return None
    except requests.exceptions.HTTPError as e:
        log.error(f"HTTP error while fetching {url}: {e}")
        if e.response is not None:
            log.error(f"Response text from server: {e.response.text}")
        return None
    except requests.exceptions.RequestException as e:
        log.error(f"General error while fetching {url}: {e}")
        return None
    except json.JSONDecodeError as e:
        log.error(f"Error decoding JSON response from {url}: {e}")
        if response is not None:
            log.error(f"Faulty response: {response.text}")
        return None
    except Exception as e:
        log.error(f"Unexpected error while fetching {url}: {e}")
        return None

def format_uptime(uptime_unix):
    """Formats the uptime based on the UNIX timestamp."""
    if not isinstance(uptime_unix, (int, float)):
        return None

    try:
        current_time = int(time.time())
        uptime_s = current_time - int(uptime_unix)

        if uptime_s < 0:
            return "Timestamp is in the future"

        uptime_m = uptime_s // 60
        uptime_h = uptime_m // 60
        uptime_d = uptime_h // 24

        if uptime_d > 2000:
            return "Offline"

        s = uptime_s % 60
        m = uptime_m % 60
        h = uptime_h % 24

        return f"{uptime_d}d {h:02}h {m:02}m {s:02}s"
    except TypeError:
        return None

def main():
    parser = argparse.ArgumentParser(description="Checkmk special agent for ExtremeCloud IQ Access Points.")
    parser.add_argument("username", help="ExtremeCloud IQ username")
    parser.add_argument("password", help="ExtremeCloud IQ password")
    args = parser.parse_args()

    # Generate API key using provided username and password
    api_key = generate_xiq_api_key(args.username, args.password)
    if not api_key:
        log.error("Failed to generate API key. Exiting.")
        sys.exit(1)

    # Fetch all Access Points
    devices = get_xiq_data("/devices", api_key, params={"device_type": "ACCESS_POINT"})
    if not devices or "data" not in devices:
        log.error("No Access Points found or error fetching devices.")
        sys.exit(1)

    # Output AP health and performance data in Checkmk format
    print("<<<xiq_ap_health>>>")
    for device in devices["data"]:
        uptime = format_uptime(device.get("system_up_time"))
        status = device.get("status", "Unknown")
        print(f"{device['name']} {status} {uptime}")

    print("<<<xiq_ap_performance>>>")
    for device in devices["data"]:
        ap_id = device["id"]
        performance = get_xiq_data(f"/devices/{ap_id}/performance", api_key)
        if performance:
            cpu_usage = performance.get("cpu_usage", "N/A")
            memory_usage = performance.get("memory_usage", "N/A")
            print(f"{device['name']} CPU {cpu_usage}% Memory {memory_usage}%")

    print("<<<xiq_ap_clients>>>")
    for device in devices["data"]:
        ap_id = device["id"]
        clients = get_xiq_data(f"/devices/{ap_id}/clients", api_key)
        if clients and "data" in clients:
            print(f"{device['name']} Clients {len(clients['data'])}")

if __name__ == "__main__":
    main()