#!/usr/bin/env python3

import requests
import json
import time
import logging
import argparse
import os
from logging.handlers import RotatingFileHandler
import sys
import keyring  # Für die sichere Speicherung des Tokens

# Konfiguration
XIQ_BASE_URL = "https://api.extremecloudiq.com"
LOG_FILE = "/var/log/check_mk/xiq_agent.log"
MAX_LOG_SIZE = 10 * 1024 * 1024  # 10 MB
LOG_BACKUP_COUNT = 5

# Logging Konfiguration
logging.basicConfig(
    handlers=[
        RotatingFileHandler(LOG_FILE, maxBytes=MAX_LOG_SIZE, backupCount=LOG_BACKUP_COUNT)
    ],
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s",
)
log = logging.getLogger(__name__)

def generate_xiq_api_key(username, password):
    # ... (Code zum Abrufen des API-Schlüssels, wie zuvor)

def get_xiq_data(endpoint, api_key, params=None):
    # ... (Code zum Abrufen von Daten von der XIQ-API, wie zuvor)

def format_uptime(uptime_unix):
    # ... (Code zur Formatierung der Uptime, wie zuvor)

def get_xiq_api_key(username, password):
    # Versuche, den Token aus dem Keyring zu laden
    api_key = keyring.get_password("extremecloudiq", username)

    if api_key:
        # Überprüfe, ob der Token noch gültig ist (optional)
        # ...

        return api_key

    else:
        # Fordere den Benutzer auf, Benutzername und Passwort einzugeben (nur beim ersten Mal)
        if not username or not password:
            print("<<<xiq_error>>>")
            print("Benutzername und Passwort müssen in WATO konfiguriert werden.")
            sys.exit(1)

        api_key = generate_xiq_api_key(username, password)

        if api_key:
            # Speichere den Token im Keyring
            keyring.set_password("extremecloudiq", username, api_key)
            return api_key
        else:
            print("<<<xiq_error>>>")
            print("Fehler beim Abrufen des API-Schlüssels.")
            sys.exit(1)

def main():
    parser = argparse.ArgumentParser(description="Checkmk special agent for ExtremeCloud IQ devices.")
    parser.add_argument("hostname", help="Hostname for Checkmk")
    parser.add_argument("username", nargs="?", help="ExtremeCloud IQ username (optional, for initial setup)")
    parser.add_argument("password", nargs="?", help="ExtremeCloud IQ password (optional, for initial setup)")
    args = parser.parse_args()

    api_key = get_xiq_api_key(args.username, args.password)

    devices = get_xiq_data("/devices", api_key)
    if not devices or "data" not in devices:
        print("<<<xiq_error>>>")
        print("Keine Geräte gefunden oder Fehler beim Abrufen der Geräte.")
        sys.exit(1)

    print("<<<xiq_devices>>>")
    for device in devices["data"]:
        uptime = format_uptime(device.get("system_up_time"))
        print(f"{device.get('name', 'N/A')} {uptime}")

if __name__ == "__main__":
    main()